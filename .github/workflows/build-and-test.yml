name: Build and Test

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      POSTGRES_DB: gilgoblin_db
      POSTGRES_USER: gilgoblin
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache NuGet packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget

      - name: Set up .NET 8.0 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Build database Docker image
        run: |
          docker build \
            --file src/Database/Dockerfile \
            --tag gilgoblin-db-ci:latest \
            src/Database/

      - name: Start database container
        run: |
          docker run -d \
            --name gilgoblin-db-ci \
            -e POSTGRES_DB=$POSTGRES_DB \
            -e POSTGRES_USER=$POSTGRES_USER \
            -e POSTGRES_PASSWORD=$POSTGRES_PASSWORD \
            -p 0:5432 \
            gilgoblin-db-ci:latest

      - name: Get mapped port
        id: get_db_port
        run: |
          PORT=$(docker inspect --format='{{(index (index .NetworkSettings.Ports "5432/tcp") 0).HostPort}}' gilgoblin-db-ci)
          echo "DB_PORT=$PORT" >> $GITHUB_ENV

      - name: Wait for Database
        run: |
          sleep 20
          for i in {1..20}; do
            if pg_isready -h localhost -p $DB_PORT -U "$POSTGRES_USER" -d "$POSTGRES_DB"; then
              echo "✅ Database is ready!"
              exit 0
            fi
            echo "⏳ Waiting for database… ($i/20)"
            sleep 2
          done
          echo "❌ Timed out waiting for database."
          exit 1

      - name: Run Tests
        env:
          DOTNET_ENVIRONMENT: Testing
          ConnectionStrings__GilGoblinDbContext: >-
            Host=localhost;
            Port=${{ env.DB_PORT }};
            Database=${{ env.POSTGRES_DB }};
            Username=${{ env.POSTGRES_USER }};
            Password=${{ env.POSTGRES_PASSWORD }}
        run: dotnet test --no-build --verbosity normal

      - name: Tear down database container
        if: always()
        run: |
          docker stop gilgoblin-db-ci
          docker rm gilgoblin-db-ci