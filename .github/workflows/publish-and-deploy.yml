name: Publish and Deploy

on:
  push:
    branches:
      - master

jobs:
  publish-nuget:
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.collect-versions.outputs.versions }}
    steps:
      - uses: actions/checkout@v4

      - name: Cache NuGet Packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget

      - name: Setup .NET8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Build Projects in Release Mode
        run: |
          for csproj in $(find ./src -name "*.csproj"); do
            dotnet build "$csproj" --configuration Release
          done

      - id: collect-versions
        name: Collect NuGet Versions
        run: |
          VERSIONS=""
          for csproj in $(find ./src -name "*.csproj"); do
            version=$(grep -oPm1 "(?<=<Version>)[^<]+" "$csproj" || echo "latest")
            project=$(basename "$(dirname "$csproj")")
            VERSIONS+="$project=$version;"
          done
          echo "versions=$VERSIONS" >> $GITHUB_ENV
          echo "versions=$VERSIONS" >> $GITHUB_OUTPUT

      - name: Publish Packages to NuGet
        run: |
          for csproj in $(find ./src -name "*.csproj"); do
            project_dir=$(dirname "$csproj")
            dotnet pack "$csproj" --configuration Release -o "$project_dir/nupkgs"
            for pkg in "$project_dir/nupkgs/"*.nupkg; do
              echo "Pushing package $pkg to NuGet..."
              dotnet nuget push "$pkg" \
                --skip-duplicate \
                --source "https://api.nuget.org/v3/index.json" \
                --api-key "${{ secrets.NUGET_API_KEY }}"
            done
          done

  publish-docker:
    runs-on: ubuntu-latest
    needs: [publish-nuget]
    outputs:
      latest_image_tag: "latest"
    steps:
      - uses: actions/checkout@v4

      - name: Cache Docker Layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS \
          --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build and Push Docker Images
        env:
          versions: ${{ needs.publish-nuget.outputs.versions }}
        run: |
          IFS=';' read -r -a version_array <<< "$versions"
          declare -A version_map
          for pair in "${version_array[@]}"; do
            key=$(echo "$pair" | cut -d= -f1)
            value=$(echo "$pair" | cut -d= -f2)
            version_map["$key"]="$value"
          done

          for project_dir in src/Api src/Database src/DataUpdater src/Accountant src/frontend; do
            if [ -f "$project_dir/Dockerfile" ]; then
              project=$(basename "$project_dir" | tr '[:upper:]' '[:lower:]') # Convert to lowercase
              prefixed_project="gilgoblin-$project" # Add 'gilgoblin-' prefix
              tag="${version_map[$project]:-latest}"

              dockerhub_image="${{ secrets.DOCKER_USERNAME }}/$prefixed_project:$tag"
              ecr_image="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/$prefixed_project:$tag"

              echo "Building Docker image: $dockerhub_image"
              docker build -t "$dockerhub_image" "$project_dir"

              echo "Pushing to Docker Hub: $dockerhub_image"
              docker push "$dockerhub_image"

              echo "Tagging image for ECR: $ecr_image"
              docker tag "$dockerhub_image" "$ecr_image"

              echo "Pushing to Amazon ECR: $ecr_image"
              docker push "$ecr_image"
            else
              echo "No Dockerfile found in $project_dir, skipping..."
            fi
          done

  deploy-fargate:
    runs-on: ubuntu-latest
    needs: [publish-docker]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy CloudFormation Stack
        run: |
          aws cloudformation deploy \
            --stack-name gilgoblin-stack \
            --template-file infrastructure/fargate-stack.yml \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset \
            --region "$AWS_REGION" \
            --parameter-overrides \
              AWSAccountId="$AWS_ACCOUNT_ID" \
              AWSRegion="$AWS_REGION" \
              EcrRepositoryAccountant="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/gilgoblin-accountant" \
              EcrRepositoryApi="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/gilgoblin-api" \
              EcrRepositoryDatabase="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/gilgoblin-database" \
              EcrRepositoryDataUpdater="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/gilgoblin-dataupdater" \
              EcrRepositoryFrontend="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com/gilgoblin-frontend"