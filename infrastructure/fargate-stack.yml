AWSTemplateFormatVersion: "2010-09-09"
Description: >
  AWS Fargate deployment with ALB for 5 ECR repositories: gilgoblin-accountant, gilgoblin-api, gilgoblin-database, gilgoblin-dataupdater, and gilgoblin-frontend.

Parameters:
  DatabaseSecretArn:
    Type: String
    Description: "ARN of the SecretsManager secret"

Resources:
  ######################
  ## LogGroup
  ######################
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/gilgoblin
      RetentionInDays: 7

  ######################
  # VPC & Networking
  ######################
  VPC:
    Type: AWS::EC2::VPC
    DependsOn: LogGroup
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: GilGoblinVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: LogGroup

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: LogGroup
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  ################
  # Public & Private Subnets
  ################
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '' ]

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs '' ]

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]

  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [ 1, !GetAZs '' ]

  ################
  # NAT Gateways & Elastic IPs
  ################
  NatEIPA:
    Type: AWS::EC2::EIP
    DependsOn: LogGroup

  NatEIPB:
    Type: AWS::EC2::EIP
    DependsOn: LogGroup

  NatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIPA.AllocationId
      SubnetId: !Ref PublicSubnetA

  NatGatewayB:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIPB.AllocationId
      SubnetId: !Ref PublicSubnetB

  # Private Route Tables & Routes
  PrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRouteA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGatewayA

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTableA

  PrivateRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRouteB:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGatewayB

  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTableB

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  ######################
  # Service Discovery
  ######################

  WebNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: gilgoblin.local
      Vpc: !Ref VPC
      Description: "Internal namespace"

  ApiDiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: api
      NamespaceId: !Ref WebNamespace
      DnsConfig:
        RoutingPolicy: WEIGHTED
        DnsRecords:
          - Type: A
            TTL: 60

  DatabaseDiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: database
      NamespaceId: !Ref WebNamespace
      DnsConfig:
        RoutingPolicy: WEIGHTED
        DnsRecords:
          - Type: A
            TTL: 60

  FrontendDiscoveryService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: frontend
      NamespaceId: !Ref WebNamespace
      DnsConfig:
        RoutingPolicy: WEIGHTED
        DnsRecords:
          - Type: A
            TTL: 60

  ######################
  # Security Groups
  ######################

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: "ALB security group"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: "0.0.0.0/0"
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
      - AttachGateway
      - PublicRoute
      - PublicSubnetARouteTableAssociation
      - PublicSubnetBRouteTableAssociation
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      SecurityGroups:
        - !Ref ALBSecurityGroup
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "60"

  DatabaseNLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: network
      Scheme: internal
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB

  ######################
  # Target Groups
  ######################

  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - ALB
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      TargetType: ip

  # AccountantTargetGroup:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   DependsOn:
  #     - ALB
  #   Properties:
  #     VpcId: !Ref VPC
  #     Port: 80
  #     Protocol: HTTP
  #     TargetType: ip

  ApiTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - ALB
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      TargetType: ip
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  DatabaseTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 5432
      Protocol: TCP
      TargetType: ip
      VpcId: !Ref VPC
      HealthCheckProtocol: TCP
      HealthCheckPort: "5432"

  # DataUpdaterTargetGroup:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   DependsOn:
  #     - ALB
  #   Properties:
  #     VpcId: !Ref VPC
  #     Port: 80
  #     Protocol: HTTP
  #     TargetType: ip
  
  FrontendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - ALB
    Properties:
      VpcId: !Ref VPC
      Protocol: HTTP
      TargetType: ip
      HealthCheckProtocol: HTTP
      HealthCheckPort: traffic-port
      HealthCheckPath: /health.html
      Port: 3000
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  ######################            
  # ALB & Listeners
  ######################            

  ALBListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup

  ALBListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: arn:aws:acm:us-east-1:381492080018:certificate/12517e67-1e27-4772-b5ec-fac8969dd2fb
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup


  ######################
  # ALB Listener Rules
  ######################

  # AccountantListenerRule:
  #   Type: AWS::ElasticLoadBalancingV2::ListenerRule
  #   DependsOn:
  #     - ALBListenerHTTP
  #     - ALBListenerHTTPS
  #     - AccountantTargetGroup
  #   Properties:
  #     ListenerArn: !Ref ALBListenerHTTPS
  #     Priority: 1
  #     Conditions:
  #       - Field: path-pattern
  #         Values: [ "/accountant/*" ]
  #     Actions:
  #       - Type: forward
  #         TargetGroupArn: !Ref AccountantTargetGroup

  ApiListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref ALBListenerHTTPS
      Priority: 2
      Conditions:
        - Field: path-pattern
          Values: [ "/api/*" ]
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ApiTargetGroup

  DatabaseListenerTCP5432:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref DatabaseNLB
      Port: 5432
      Protocol: TCP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DatabaseTargetGroup

  # DataUpdaterListenerRule:
  #   Type: AWS::ElasticLoadBalancingV2::ListenerRule
  #   DependsOn:
  #     - ALBListenerHTTP
  #     - ALBListenerHTTPS      
  #     - DataUpdaterTargetGroup
  #   Properties:
  #     ListenerArn: !Ref ALBListenerHTTPS
  #     Priority: 4
  #     Conditions:
  #       - Field: path-pattern
  #         Values: [ "/dataupdater/*" ]
  #     Actions:
  #       - Type: forward
  #         TargetGroupArn: !Ref DataUpdaterTargetGroup

  FrontendListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn:
      - ALBListenerHTTP
    Properties:
      ListenerArn: !Ref ALBListenerHTTPS
      Priority: 5
      Conditions:
        - Field: path-pattern
          Values:
            - "/frontend/*"
            - "/health.html"
      Actions:
        - Type: forward
          TargetGroupArn: !Ref FrontendTargetGroup

  ####################
  # Security Groups  #
  ####################

  ApiSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: "Security group for API"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref FrontendSecurityGroup
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: "Security group for database"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ApiSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  FrontendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: "Security group for frontend"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort:   3000
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  ######################
  # ECS Cluster & Execution Role
  ######################
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: "GilGoblinECSCluster"

  ExecutionRole:
    Type: AWS::IAM::Role
    DependsOn: LogGroup
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: ECSExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                  - ecr:BatchGetImage
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:CreateLogGroup                  
                  - logs:DeleteLogGroup
                  - secretsmanager:GetSecretValue
                Resource: "*"

  ##############################
  # ECS Task Definitions & Services for each repository
  ##############################

  # AccountantTaskDefinition:
  #   Type: AWS::ECS::TaskDefinition
  #   Properties:
  #     Family: "gilgoblin-accountant-task"
  #     RequiresCompatibilities:
  #       - FARGATE
  #     Cpu: "256"
  #     Memory: "512"
  #     NetworkMode: awsvpc
  #     ExecutionRoleArn: !GetAtt ExecutionRole.Arn
  #     ContainerDefinitions:
  #       - Name: "gilgoblin-accountant-container"
  #         Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/gilgoblin-accountant"
  #         PortMappings:
  #           - ContainerPort: 80
          # Secrets:
          #   - Name: ConnectionStrings__GilGoblinDbContext
          #     ValueFrom: !Sub ${DatabaseSecretArn}:SecretString:DB_CONNECTION_STRING
  #         LogConfiguration:
  #           LogDriver: awslogs
  #           Options:
  #             awslogs-group: !Ref LogGroup
  #             awslogs-region: !Ref AWS::Region
  #             awslogs-stream-prefix: accountant

  # AccountantService:
  #   Type: AWS::ECS::Service
  #   DependsOn:
  #     - ALBListenerHTTP
  #     - ALBListenerHTTPS
  #     - AccountantListenerRule
# - LogGroup  
  #   Properties:
  #     Cluster: !Ref ECSCluster
  #     TaskDefinition: !Ref AccountantTaskDefinition
  #     LaunchType: FARGATE
  #     DesiredCount: 1
  #     NetworkConfiguration:
  #       AwsvpcConfiguration:
  #         AssignPublicIp: DISABLED
  #         Subnets:
  #           - !Ref PrivateSubnetA
  #           - !Ref PrivateSubnetB
  #         SecurityGroups:
  #           - !Ref ECSServiceSecurityGroup
  #     LoadBalancers:
  #       - ContainerName: "gilgoblin-accountant-container"
  #         ContainerPort: 80
  #         TargetGroupArn: !Ref AccountantTargetGroup

  ApiTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: "gilgoblin-api-task"
      RequiresCompatibilities:
        - FARGATE
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      ContainerDefinitions:
        - Name: "gilgoblin-api-container"
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/gilgoblin-api"
          PortMappings:
            - ContainerPort: 80
          Environment:
            - Name: ConnectionStrings__GilGoblinDbContext
              Value: !Sub "{{resolve:secretsmanager:${DatabaseSecretArn}:SecretString:DB_CONNECTION_STRING}}"
            - Name: FrontEndUrl
              Value: !Join [ "", [ "https://", !GetAtt ALB.DNSName ] ]
            - Name: ASPNETCORE_URLS
              Value: "http://+:80"
          HealthCheck:
            Command:
              - CMD-SHELL
              - curl -f http://localhost:55448/health || exit 1
            Interval: 30   
            Timeout: 5     
            Retries: 3     
            StartPeriod: 60
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: api

  ApiService:
    Type: AWS::ECS::Service
    DependsOn:
      - ALBListenerHTTP
      - ALBListenerHTTPS
      - ApiListenerRule
      - LogGroup
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ApiTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 60
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnetA
            - !Ref PrivateSubnetB
          SecurityGroups:
            - !Ref ApiSecurityGroup
      ServiceRegistries:
        - RegistryArn: !GetAtt ApiDiscoveryService.Arn
          ContainerName: gilgoblin-api-container
      LoadBalancers:
        - ContainerName: gilgoblin-api-container
          ContainerPort: 80
          TargetGroupArn: !Ref ApiTargetGroup

  DatabaseTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: "gilgoblin-database-task"
      RequiresCompatibilities:
        - FARGATE
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      ContainerDefinitions:
        - Name: "gilgoblin-database-container"
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/gilgoblin-database"
          PortMappings:
            - ContainerPort: 5432
          Environment:
            - Name: POSTGRES_DB
              Value: !Sub "{{resolve:secretsmanager:${DatabaseSecretArn}:SecretString:POSTGRES_DB}}"
            - Name: POSTGRES_USER
              Value: !Sub "{{resolve:secretsmanager:${DatabaseSecretArn}:SecretString:POSTGRES_USER}}"
            - Name: POSTGRES_PASSWORD
              Value: !Sub "{{resolve:secretsmanager:${DatabaseSecretArn}:SecretString:POSTGRES_PASSWORD}}"
            - Name: PGUSER
              Value: !Sub "{{resolve:secretsmanager:${DatabaseSecretArn}:SecretString:PGUSER}}"
            - Name: PGDATA
              Value: !Sub "{{resolve:secretsmanager:${DatabaseSecretArn}:SecretString:PGDATA}}"
            - Name: PORT_DATABASE
              Value: !Sub "{{resolve:secretsmanager:${DatabaseSecretArn}:SecretString:PORT_DATABASE}}"
          HealthCheck:
            Command: ["CMD-SHELL", "pg_isready -d $POSTGRES_DB"]
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: database

  DatabaseService:
    Type: AWS::ECS::Service
    DependsOn:
      - LogGroup
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref DatabaseTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 80  
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnetA
            - !Ref PrivateSubnetB
          SecurityGroups:
            - !Ref DatabaseSecurityGroup
      ServiceRegistries:
        - RegistryArn: !GetAtt DatabaseDiscoveryService.Arn
          ContainerName: gilgoblin-database-container
      # LoadBalancers:
      #   - ContainerName: gilgoblin-database-container
      #     ContainerPort: 5432
      #     TargetGroupArn: !Ref DatabaseTargetGroup

  # DataUpdaterTaskDefinition:
  #   Type: AWS::ECS::TaskDefinition
  #   Properties:
  #     Family: "gilgoblin-dataupdater-task"
  #     RequiresCompatibilities:
  #       - FARGATE
  #     Cpu: "256"
  #     Memory: "512"
  #     NetworkMode: awsvpc
  #     ExecutionRoleArn: !GetAtt ExecutionRole.Arn
  #     ContainerDefinitions:
  #       - Name: "gilgoblin-dataupdater-container"
  #         Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/gilgoblin-dataupdater"
  #         PortMappings:
  #           - ContainerPort: 80
          # Secrets:
          #   - Name: ConnectionStrings__GilGoblinDbContext
          #     ValueFrom: !Sub ${DatabaseSecretArn}:SecretString:DB_CONNECTION_STRING
  #         LogConfiguration:
  #           LogDriver: awslogs
  #           Options:
  #             awslogs-group: !Ref LogGroup
  #             awslogs-region: !Ref AWS::Region
  #             awslogs-stream-prefix: dataupdater

  # DataUpdaterService:
  #   Type: AWS::ECS::Service
  #   DependsOn:
  #     - ALBListenerHTTP
  #     - ALBListenerHTTPS
  #     - DataUpdaterListenerRule
  # - LogGroup
  #   Properties:
  #     Cluster: !Ref ECSCluster
  #     TaskDefinition: !Ref DataUpdaterTaskDefinition
  #     LaunchType: FARGATE
  #     DesiredCount: 1
  #     NetworkConfiguration:
  #       AwsvpcConfiguration:
  #         AssignPublicIp: DISABLED
  #         Subnets:
  #           - !Ref PrivateSubnetA
  #           - !Ref PrivateSubnetB
  #         SecurityGroups:
  #           - !Ref ECSServiceSecurityGroup
  #     LoadBalancers:
  #       - ContainerName: "gilgoblin-dataupdater-container"
  #         ContainerPort: 80
  #         TargetGroupArn: !Ref DataUpdaterTargetGroup

  FrontendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: "gilgoblin-frontend-task"
      RequiresCompatibilities:
        - FARGATE
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      ContainerDefinitions:
        - Name: gilgoblin-frontend-container
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/gilgoblin-frontend"
          PortMappings:
            - ContainerPort: 3000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: frontend

  FrontendService:
    Type: AWS::ECS::Service
    DependsOn:
      - ALBListenerHTTP
      - ALBListenerHTTPS
      - FrontendListenerRule
      - LogGroup
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref FrontendTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 60
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref PrivateSubnetA
            - !Ref PrivateSubnetB
          SecurityGroups:
            - !Ref FrontendSecurityGroup
      ServiceRegistries:
        - RegistryArn: !GetAtt FrontendDiscoveryService.Arn
          ContainerName: gilgoblin-frontend-container
      LoadBalancers:
        - ContainerName: gilgoblin-frontend-container
          ContainerPort: 3000
          TargetGroupArn: !Ref FrontendTargetGroup

Outputs:
  ALBDNSName:
    Description: "The DNS name of the ALB"
    Value: !GetAtt ALB.DNSName